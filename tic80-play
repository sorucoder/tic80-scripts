#!/usr/bin/env bash

TIC80_START_PATH=${TIC80_START_PATH:-$HOME/.local/share/com.nesbox.tic/TIC-80}

function print_usage() {
    printf "Usage: tic80-play [options] cart\n\n"

    printf "This script immediately loads and plays a TIC-80 cartridge.\n"
    printf "Use tic80 for the normal binary.\n\n"

    printf "Options:\n"
    printf "\t-h, --help\tshow this help message and exit\n"
    printf "\t--noskip\tdon't skip startup animation\n"
    printf "\t--volume=<int>\tglobal volume value [0-15]\n"
    printf "\t--fullscreen\tenable fullscreen mode\n"
    printf "\t--vsync\t\tenable VSYNC\n"
    printf "\t--soft\t\tuse software rendering\n"
    printf "\t--scale=<int>\tmain window scale\n"
    printf "\t--config=<str>\tpath to configuration\n"
}

function quit() {
    unset options option value cartridge cartridge_name cartridge_path
    exit $1
}

# Parse options
config=$TIC80_START_PATH/.local
declare -a options=( --skip )
while [[ $1 =~ ^--? ]]; do
    option=$1
    if [[ $option =~ ^(-h|--help)$ ]]; then
        print_usage > /dev/stderr
        quit 0
    elif [[ $option =~ ^--noskip$ ]]; then
        options=( ${options[@]/^--skip$/} )
    elif [[ $option =~ ^(--fullscreen|--vsync|--soft)$ ]]; then
        options=( ${options[@]/$option/} )
        options+=( $option )
    elif [[ $option =~ ^--volume ]]; then
        options=( ${options[@]/^--volume/} )
        if [[ $option =~ ^--volume$ ]]; then
            shift; value=$1
            if [[ ! $value =~ ^[0-9]+$ ]]; then
                printf "error: option \`--volume\` expects an integer value" > /dev/stderr
                quit 1
            fi
            options+=( --volume=$value )
        elif [[ $option =~ ^--volume=[0-9]+$ ]]; then
            options+=( $option )
        else
            printf "error: option \`--volume\` expects an integer value" > /dev/stderr
            quit 1
        fi
    elif [[ $option =~ ^--scale ]]; then
        options=( ${options[@]/^--scale/} )
        if [[ $option == --scale ]]; then
            shift; value=$1
            if [[ ! $value =~ ^[0-9]+$ ]]; then
                printf "error: option \`--volume\` expects an integer value" > /dev/stderr
                quit 1
            fi
            options+=( --scale=$value )
        elif [[ $option =~ ^--scale=[0-9]+$ ]]; then
            options+=( $option )
        else
            printf "error: option \`--scale\` expects an integer value" > /dev/stderr
            quit 1
        fi
    elif [[ $option =~ ^--config ]]; then
        if [[ $option == --config ]]; then
            shift; config=$1
        elif [[ $option =~ ^--config=.+$ ]]; then
            config=$(cut -d "=" -f 2- <<< $option)
        else
            printf "error: option \`--config\` expects a string value\n" > /dev/stderr
            quit 1
        fi
    else
        printf "error: unknown option \`$option\`" > /dev/stderr
        print_usage > /dev/stderr
        quit 1
    fi
    shift
done

# Check binary
if ! which tic80 &> /dev/null; then
    printf "error: tic80 not installed" > /dev/stderr
    quit 1
fi

# Check cartridge
cartridge=$(readlink -f $1 2> /dev/null)
if [[ -z $cartridge ]]; then
    printf "error: no cartridge specified" > /dev/stderr
    quit 1
elif [[ ! -e $cartridge ]]; then
	printf "error: cartridge \`$cartridge\` does not exist" > /dev/stderr
	quit 1
fi
cartridge_path=$(dirname $cartridge)
cartridge_name=$(basename $cartridge)

# Link configuration
if [[ ! -d $config ]]; then
    printf "warning: option \`--config\` is not a valid config directory; using \`$TIC80_START_PATH/.local\` instead\n" > /dev/stderr
    config="$TIC80_START_PATH/.local"
fi
ln -s $config $cartridge_path/.local

tic80 "${options[@]}" --cmd="load $cartridge_name & run & exit"
quit $?
