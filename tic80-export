#!/usr/bin/env bash

function print_usage() {
    printf "Usage: tic80-export [options] cart data file\n\n"

    printf "This script exports TIC-80 cartridge data in the specified format type.\n"
    printf "Use tic80 for the normal binary.\n\n"

    printf "Options:\n"
    printf "\t-h,--help\tshow this help message and exit\n"
    printf "\t--id=<int>\texport selected sound effect [0-63] or music track [0-7] (default: 0)\n\n"

    printf "PRO Edition Options:\n"
    printf "\t--alone\t\texport without editors\n"
    printf "\t--bank=<int>\texport from selected bank [0-7] (default: 0)\n"
    printf "\t--vbank=<int>\texport from selected VRAM bank [0-1] (default: 0)\n\n"

    printf "Data Formats:\n"
    printf "\twin\t\tWindows application\n"
    printf "\twinxp\t\tWindows XP application\n"
    printf "\tlinux\t\tLinux application\n"
    printf "\trpi\t\tRaspberry PI application\n"
    printf "\tmac\t\tMacintosh application\n"
    printf "\thtml\t\tWeb application\n"
    printf "\ttiles\t\ttiles as .png image\n"
    printf "\tsprites\t\tsprites as .png image\n"
    printf "\tmap\t\tmap as .map file\n"
    printf "\tmapimg\t\tmap as .png image\n"
    printf "\tsfx\t\tsound effects as .wav sound\n"
    printf "\tmusic\t\tmusic as .wav sound\n"
    printf "\tscreen\t\tscreen as .png image\n"
}

function quit() {
    unset options option value pro_required cartridge cartridge_path cartridge_name data extension file tempfile
    exit $1
}

# Parse options
pro_required=false
declare -a options=()
while [[ $1 =~ ^--? ]]; do
    option=$1
    if [[ $option =~ ^(-h|--help) ]]; then
        print_usage
        quit 0
    elif [[ $option =~ ^--alone ]]; then
        pro_required=true
        options=( ${options[@]/^alone=1$/} )
        options+="alone=1"
    elif [[ $option =~ ^--bank ]]; then
        pro_required=true
        if [[ $option =~ ^--bank$ ]]; then
            shift; value=$1
            if [[ ! $value =~ ^[0-9]+$ ]]; then
                printf "error: option \`--bank\` expects an integer value" > /dev/stderr
                quit 1
            fi
            options=( ${options[@]/^bank=[0-9]+$/} )
            options+="bank=$1"
        elif [[ $option =~ ^--bank=[0-9]+$ ]]; then
            options=( ${options[@]/^bank=[0-9]+$/} )
            options+="bank=${1#--bank=}"
        else
            printf "error: option \`--bank\` expects an integer value\n" > /dev/stderr
            quit 1
        fi
    elif [[ $option =~ ^--vbank ]]; then
        pro_required=true
        if [[ $option =~ ^--vbank$ ]]; then
            shift; value=$1
            if [[ ! $value =~ ^[0-9]+$ ]]; then
                printf "error: option \`--vbank\` expects an integer value" > /dev/stderr
                quit 1
            fi 
            options=( ${options[@]/^vbank=[0-9]+$/} )
            options+="vbank=$1"
        elif [[ $1 =~ ^--vbank=[0-9]+$ ]]; then
            options=( ${options[@]/^vbank=[0-9]+$/} )
            options+="vbank=${1#--vbank=}"
        else
            printf "error: option \`--vbank\` expects an integer value\n" > /dev/stderr
            quit 1
        fi
    elif [[ $option =~ ^--id ]]; then
        if [[ $option =~ ^--id$ ]]; then
            shift; value=$1
            if [[ ! $value =~ ^[0-9]+$ ]]; then
                printf "error: option \`--id\` expects an integer value" > /dev/stderr
                quit 1
            fi
            options=( ${options[@]/^id=[0-9]+$/} )
            options+="id=$1"
        elif [[ $option =~ ^--id=[0-9]+$ ]]; then
            options=( ${options[@]/^id=[0-9]+$/} )
            options+="id=$(cut -d '=' -f 2- <<< $option)"
        else
            printf "error: option \`--id\` expects an integer value\n" > /dev/stderr
            quit 1
        fi
    else
        print_usage > /dev/stderr
        quit 1
    fi
    shift
done

# Check binary
if ! which tic80 &> /dev/null; then
    printf "error: tic80 not installed\n" > /dev/stderr
    quit 1
elif $pro_required && [[ ! $(tic80 --version) =~ Pro ]]; then
    printf "error: need tic80 PRO edition\n" > /dev/stderr
    quit 1
fi

# Check cartridge
cartridge=$1
if [[ -z $cartridge ]]; then
    printf "error: no cartridge specified\n" > /dev/stderr
    print_usage > /dev/stderr
    quit 1
elif [[ ! -e $cartridge ]]; then
	printf "error: cartridge \`$cartridge\` does not exist\n" > /dev/stderr
	quit 1
fi
cartridge_path=$(dirname $cartridge)
cartridge_name=$(basename $cartridge)
shift

# Check format
data=$1
case $data in
    linux|mac|rpi)                  extension="";;
    win|winxp)                      extension=".exe";;
    html)                           extension=".zip";;
    tiles|sprites|mapimg|screen)    extension=".png";;
    map)                            extension=".map";;
    sfx|music)                      extension=".wav";;
    *)
        printf "error: invalid format \`$data\`\n" > /dev/stderr
        print_usage > /dev/stderr
        quit 1
        ;;
esac
shift

# Check file
file=$1
if [[ -z $file ]]; then
    printf "error: no file specified\n" > /dev/stderr
    print_usage > /dev/stderr
    quit 1
fi

tempfile=".${cartridge_name%.*}-$data-$(cat /dev/urandom | tr -cd 0-9a-f | head -c 16)$extension"
tic80 --cli --fs="$cartridge_path" --cmd="load $cartridge_name & export $data $tempfile ${options[@]} & exit"
mv $tempfile $file
printf "\e[1K\r$file exported :)\n"
quit 0